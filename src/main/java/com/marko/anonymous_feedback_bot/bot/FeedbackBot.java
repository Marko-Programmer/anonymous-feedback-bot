package com.marko.anonymous_feedback_bot.bot;

import com.marko.anonymous_feedback_bot.bot.keyboards.*;
import com.marko.anonymous_feedback_bot.bot.session.RegistrationSession;
import com.marko.anonymous_feedback_bot.model.Feedback;
import com.marko.anonymous_feedback_bot.model.Role;
import com.marko.anonymous_feedback_bot.model.User;
import com.marko.anonymous_feedback_bot.model.UserFilters;
import com.marko.anonymous_feedback_bot.repository.UserRepository;
import com.marko.anonymous_feedback_bot.service.FeedbackService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.format.DateTimeFormatter;
import java.util.*;

@Component
@RequiredArgsConstructor
public class FeedbackBot extends TelegramLongPollingBot {

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.admin.password}")
    private String adminPassword;

    private final UserRepository userRepository;
    private final FeedbackService feedbackService;

    private final Map<Long, RegistrationSession> registrationSessions = new HashMap<>();
    private final Map<Long, Boolean> awaitingFeedback = new HashMap<>();
    private final Map<Long, Boolean> inAdminPanel = new HashMap<>();
    private final Map<Long, Boolean> inFilterPanel = new HashMap<>();

    private final Map<Long, UserFilters> userFiltersMap = new HashMap<>();




    @Override
    public void onRegister() {
        try {
            this.execute(new SetMyCommands(
                    List.of(new BotCommand("/start", "–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")),
                    new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            System.err.println(e.getMessage());
        }
    }



    // –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±–æ—Ç–∞

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        Long telegramId = update.getMessage().getFrom().getId();
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();




        if (inFilterPanel.getOrDefault(telegramId, false)) {
            UserFilters filters = userFiltersMap.computeIfAbsent(telegramId, k -> new UserFilters());
            String cleanText = text.replace(" ‚úÖ", "");

            // üîπ —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É —Ä–æ–ª—ñ
            if (filters.roleFilters.containsKey(cleanText)) {
                handleRoleFilter(telegramId, chatId, text);
                return;
            }

            // üîπ —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É —Ñ—ñ–ª—ñ—ó
            if (filters.branchFilters.containsKey(cleanText)) {
                handleBranchFilter(telegramId, chatId, text);
                return;
            }

            // üîπ —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É —Ñ—ñ–ª—ñ—ó
            if (filters.severityFilters.containsKey(cleanText)) {
                handleSeverityFilter(telegramId, chatId, text);
                return;
            }

            filterFeedbacks(chatId, telegramId, text);
            return;
        }



        if (inAdminPanel.getOrDefault(telegramId, false)) {
            handleAdminPanel(chatId, telegramId, text);
            return;
        }

        if (registrationSessions.containsKey(telegramId)) {
            handleRegistration(telegramId, text, chatId);
            return;
        }


        if (awaitingFeedback.getOrDefault(telegramId, false)) {
            if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
                awaitingFeedback.remove(telegramId);
                sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", MenuKeyboard.getKeyboard());
                return;
            }

            User user = userRepository.findById(telegramId).orElse(null);
            if (user != null) {
                sendMessage(chatId, "–ô–¥–µ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...");
                handleFeedback(text, user.getRole(), user.getBranch(), user.getTelegramId(), chatId);
                awaitingFeedback.remove(telegramId);
            } else {
                sendMessage(chatId, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é!");
            }
            return;
        }


        Optional<User> existingUser = userRepository.findById(telegramId);


        switch (text) {
            case "/start":
                sendMessageKeyboard(chatId, "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", MenuKeyboard.getKeyboard());
                break;

            case "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è / –ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ —Ç–∞ —Ñ—ñ–ª—ñ—ó":
                registrationSessions.remove(telegramId);
                handleRegistration(telegramId, "", chatId);
                break;

            case "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫":
                if (existingUser.isPresent()) {
                    sendMessageKeyboard(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:", BackKeyboard.getKeyboard());
                    awaitingFeedback.put(telegramId, true);
                } else {
                    sendMessage(chatId, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é!");
                }
                break;

            default:
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ üëá", MenuKeyboard.getKeyboard());
                break;
        }
    }



    // –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–≥—É–∫—É

    private void handleFeedback(String message, Role role, String branch, Long telegramId, Long chatId) {
        try {
            feedbackService.processAndSaveFeedback(message, role, branch);
            sendMessageKeyboard(chatId,
                    "–í–∞—à –≤—ñ–¥–≥—É–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É —É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ —Å–µ—Ä–≤—ñ—Å—É!",
                    BackToMenuKeyboard.getKeyboard());
        } catch (Exception e) {
            System.err.println(e.getMessage());
            sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    }





    // –õ–æ–≥—ñ–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó

    private static final Map<String, Role> ROLE_MAP = Map.of(
            "–ú–µ—Ö–∞–Ω—ñ–∫", Role.MECHANIC,
            "–ï–ª–µ–∫—Ç—Ä–∏–∫", Role.ELECTRICIAN,
            "–ú–µ–Ω–µ–¥–∂–µ—Ä", Role.MANAGER,
            "–ê–¥–º—ñ–Ω", Role.ADMIN
    );

    private void handleRegistration(Long telegramId, String text, Long chatId) {
        RegistrationSession session = registrationSessions.computeIfAbsent(telegramId, k -> new RegistrationSession());

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
            if (session.isAwaitingAdminPassword() || (session.getRole() != null && session.getBranch() == null)) {
                session.setRole(null);
                session.setAwaitingAdminPassword(false);
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", RoleSelectionKeyboard.getKeyboard());
            } else {
                registrationSessions.remove(telegramId);
                sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", MenuKeyboard.getKeyboard());
            }
            return;
        }


    // –Ø–∫—â–æ —á–µ–∫–∞—î–º–æ –ø–∞—Ä–æ–ª—å
        if (session.isAwaitingAdminPassword()) {
            if (adminPassword.equals(text)) {
                session.setAwaitingAdminPassword(false);
                registrationSessions.remove(telegramId);
                inAdminPanel.put(telegramId, true);
                handleAdminPanel(chatId, telegramId, "");
            } else {
                sendMessageKeyboard(chatId, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", BackKeyboard.getKeyboard());
            }
            return;
        }

//  –í–∏–±—ñ—Ä —Ä–æ–ª—ñ
        if (session.getRole() == null) {
            Role selectedRole = ROLE_MAP.get(text);
            if (selectedRole != null) {
                session.setRole(selectedRole);

                if (selectedRole == Role.ADMIN) {
                    session.setAwaitingAdminPassword(true);
                    sendMessageKeyboard(chatId, "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", BackKeyboard.getKeyboard());
                } else {
                    sendMessageKeyboard(chatId, "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é:", BranchKeyboard.getKeyboard());
                }
            } else {
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", RoleSelectionKeyboard.getKeyboard());
            }
            return;
        }

//   –Ø–∫—â–æ —Ñ—ñ–ª—ñ—è —â–µ –Ω–µ –æ–±—Ä–∞–Ω–∞
        if (session.getBranch() == null) {
            session.setBranch(text);

            User user = userRepository.findById(telegramId).orElse(new User());
            user.setTelegramId(telegramId);
            user.setRole(session.getRole());
            user.setBranch(session.getBranch());
            userRepository.save(user);

            registrationSessions.remove(telegramId);
            sendMessageKeyboard(chatId, "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏.", MenuKeyboard.getKeyboard());
        }

    }







    // –ª–æ–≥—ñ–∫–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ

    private void handleAdminPanel(Long chatId, Long telegramId, String text) {
        UserFilters filters = userFiltersMap.get(telegramId);

        switch (text) {

            case "–ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–≥—É–∫–∏":
                findFeedbacks(telegramId, chatId);
                break;

            case "–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏":
                filterFeedbacks(telegramId, chatId, "");
                inFilterPanel.put(telegramId, true);
                break;


            case "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
                sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", MenuKeyboard.getKeyboard());
                if (filters != null) {
                    filters.roleFilters.replaceAll((k, v) -> true);
                    filters.branchFilters.replaceAll((k, v) -> true);
                    filters.severityFilters.replaceAll((k, v) -> true);
                }
                inAdminPanel.remove(telegramId);
                inFilterPanel.remove(telegramId);
                break;

            default:
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", AdminPanelKeyboard.getKeyboard());
                break;
        }
    }




    // –ü–æ—à—É–∫ –≤—ñ–¥–≥—É–∫—ñ–≤

    void findFeedbacks(Long telegramId, Long chatId) {
        List<Feedback> feedbacks = feedbackService.getAllFeedbacks();

        if (feedbacks.isEmpty()) {
            sendMessage(chatId, "–í—ñ–¥–≥—É–∫—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î...");
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ —î)
        UserFilters filters = userFiltersMap.getOrDefault(telegramId, new UserFilters());

        // üîπ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ä–æ–ª–ª—é
        feedbacks = feedbacks.stream()
                .filter(fb -> filters.roleFilters.getOrDefault(fb.getRole().toString(), true))
                .filter(fb -> filters.branchFilters.getOrDefault(fb.getBranch(), true))
                .filter(fb -> filters.severityFilters.getOrDefault(String.valueOf(fb.getSeverity()), true))
                .toList();

        if (feedbacks.isEmpty()) {
            sendMessage(chatId, "–ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º.");
            sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", AdminPanelKeyboard.getKeyboard());
            return;
        }

        StringBuilder response = new StringBuilder("*–°–ø–∏—Å–æ–∫ –≤—ñ–¥–≥—É–∫—ñ–≤:*\n\n");

        for (Feedback feedback : feedbacks) {
            response.append("*[")
                    .append(feedback.getBranch())
                    .append(", ")
                    .append(feedback.getRole())
                    .append("] (")
                    .append(feedback.getSeverity())
                    .append("):* ")
                    .append("\n")
                    .append(feedback.getMessage())
                    .append("\n")
                    .append(feedback.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")))
                    .append("\n\n");
        }

        sendMessageWithMarkdown(chatId, response.toString());
        sendMessageKeyboard(chatId, "\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", AdminPanelKeyboard.getKeyboard());
    }




    // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤

    private void filterFeedbacks(Long chatId, Long telegramId, String text) {
        UserFilters filters = userFiltersMap.get(telegramId);


        switch (text) {

            case "–ó–∞ —Ñ—ñ–ª—ñ—î—é":
                inFilterPanel.put(telegramId, true);
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é:", BranchFilterKeyboard.getKeyboard(filters));
                break;

            case "–ó–∞ —Ä–æ–ª–ª—é":
                inFilterPanel.put(telegramId, true);
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å:", RoleFilterKeyboard.getKeyboard(filters));
                break;

            case "–ó–∞ –∫—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—é":
                inFilterPanel.put(telegramId, true);
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ:", SeverityFilterKeyboard.getKeyboard(filters));
                break;

            case "–°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏":

                if (filters != null) {
                    filters.roleFilters.replaceAll((k, v) -> true);
                    filters.branchFilters.replaceAll((k, v) -> true);
                    filters.severityFilters.replaceAll((k, v) -> true);
                }
                inFilterPanel.remove(telegramId);

                sendMessage(chatId, "–§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ");
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", AdminPanelKeyboard.getKeyboard());
                break;

            case "–ù–∞–∑–∞–¥":
                inFilterPanel.remove(telegramId);
                sendMessageKeyboard(chatId, "\n–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å:", AdminPanelKeyboard.getKeyboard());
                break;

            default:
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—ñ–ª—å—Ç—Ä—É:", FilterChooseKeyboard.getKeyboard());
                break;
        }
    }

    // –õ–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞ —Ä–æ–ª—ñ

    private void handleRoleFilter(Long telegramId, Long chatId, String text) {
        UserFilters filters = userFiltersMap.get(telegramId);
        if (filters == null) {
            filters = new UserFilters();
            userFiltersMap.put(telegramId, filters);
        }

        if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
            sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å:", AdminPanelKeyboard.getKeyboard());
            return;
        }

        String roleKey = text.replace(" ‚úÖ", "");
        if (filters.roleFilters.containsKey(roleKey)) {
            boolean currentState = filters.roleFilters.get(roleKey);
            filters.roleFilters.put(roleKey, !currentState);

            if (currentState) {
                sendMessage(chatId, "–†–æ–ª—å " + roleKey + " –≤–∏–ª—É—á–µ–Ω–∞ –∑ –ø–æ—à—É–∫—É.");
            } else {
                sendMessage(chatId, "–†–æ–ª—å " + roleKey + " –∑–Ω–æ–≤—É –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –≤ –ø–æ—à—É–∫—É.");
            }
        }

        sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å:", RoleFilterKeyboard.getKeyboard(filters));
 }


    // üîπ –õ–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Ñ—ñ–ª—ñ—î—é
    private void handleBranchFilter(Long telegramId, Long chatId, String text) {
        UserFilters filters = userFiltersMap.get(telegramId);
        if (filters == null) {
            filters = new UserFilters();
            userFiltersMap.put(telegramId, filters);
        }

        if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
            inFilterPanel.remove(telegramId);
            sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å:", AdminPanelKeyboard.getKeyboard());
            return;
        }


        String branchKey = text.replace(" ‚úÖ", "");
        if (filters.branchFilters.containsKey(branchKey)) {
            boolean currentState = filters.branchFilters.get(branchKey);
            filters.branchFilters.put(branchKey, !currentState);

            if (currentState) {
                sendMessage(chatId, branchKey + " –≤–∏–ª—É—á–µ–Ω–∞ –∑ –ø–æ—à—É–∫—É.");
            } else {
                sendMessage(chatId, branchKey + " –∑–Ω–æ–≤—É –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –≤ –ø–æ—à—É–∫—É.");
            }
        }

        sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é:", BranchFilterKeyboard.getKeyboard(filters));
    }


    private void handleSeverityFilter(Long telegramId, Long chatId, String text) {
        UserFilters filters = userFiltersMap.get(telegramId);
        if (filters == null) {
            filters = new UserFilters();
            userFiltersMap.put(telegramId, filters);
        }

        if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
            inFilterPanel.remove(telegramId);
            sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å:", AdminPanelKeyboard.getKeyboard());
            return;
        }


        String severityKey = text.replace(" ‚úÖ", "");
        if (filters.severityFilters.containsKey(severityKey)) {
            boolean currentState = filters.severityFilters.get(severityKey);
            filters.severityFilters.put(severityKey, !currentState); // –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Å—Ç–∞–Ω

            if (currentState) {
                sendMessage(chatId, "–†—ñ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ " + severityKey + " –≤–∏–ª—É—á–µ–Ω–∏–π –∑ –ø–æ—à—É–∫—É.");
            } else {
                sendMessage(chatId, "–†—ñ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ " + severityKey + " –∑–Ω–æ–≤—É –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –≤ –ø–æ—à—É–∫—É.");
            }
        }

        sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ:", SeverityFilterKeyboard.getKeyboard(filters));
    }



    // –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    public void sendMessage(Long chatId, String text) {
        try {
            execute(new SendMessage(chatId.toString(), text));
        } catch (TelegramApiException e) {
            System.err.println(e.getMessage());
        }
    }


    public void sendMessageKeyboard(Long chatId, String text, ReplyKeyboardMarkup keyboard) {
        try {
            SendMessage message = new SendMessage(chatId.toString(), text);
            message.setReplyMarkup(keyboard);
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println(e.getMessage());
        }
    }


    public void sendMessageWithMarkdown(Long chatId, String text) {
        try {
            SendMessage message = SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .parseMode("Markdown")
                    .build();
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ Markdown-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + e.getMessage());
        }
    }


    @Override
    public String getBotUsername() { return botUsername; }

    @Override
    public String getBotToken() { return botToken; }
}