package com.marko.anonymous_feedback_bot.bot;

import com.marko.anonymous_feedback_bot.bot.keyboards.*;
import com.marko.anonymous_feedback_bot.bot.session.RegistrationSession;
import com.marko.anonymous_feedback_bot.model.Role;
import com.marko.anonymous_feedback_bot.model.User;
import com.marko.anonymous_feedback_bot.repository.UserRepository;
import com.marko.anonymous_feedback_bot.service.FeedbackService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Component
@RequiredArgsConstructor
public class FeedbackBot extends TelegramLongPollingBot {

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    private final UserRepository userRepository;
    private final FeedbackService feedbackService;

    private final Map<Long, RegistrationSession> registrationSessions = new HashMap<>();
    private final Map<Long, Boolean> awaitingFeedback = new HashMap<>();



    @Override
    public void onRegister() {
        try {
            this.execute(new SetMyCommands(
                    List.of(new BotCommand("/start", "–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")),
                    new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            System.err.println(e.getMessage());
        }
    }



    // –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±–æ—Ç–∞

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        Long telegramId = update.getMessage().getFrom().getId();
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();


        if (registrationSessions.containsKey(telegramId)) {
            handleRegistration(telegramId, text, chatId);
            return;
        }


        if (awaitingFeedback.getOrDefault(telegramId, false)) {
            if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
                awaitingFeedback.remove(telegramId);
                sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", MenuKeyboard.getKeyboard());
                return;
            }

            User user = userRepository.findById(telegramId).orElse(null);
            if (user != null) {
                sendMessage(chatId, "–ô–¥–µ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...");
                handleFeedback(text, user.getRole(), user.getBranch(), user.getTelegramId(), chatId);
                awaitingFeedback.remove(telegramId);
            } else {
                sendMessage(chatId, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é!");
            }
            return;
        }


        Optional<User> existingUser = userRepository.findById(telegramId);


        switch (text) {
            case "/start":
                sendMessageKeyboard(chatId, "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", MenuKeyboard.getKeyboard());
                break;

            case "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è / –ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ —Ç–∞ —Ñ—ñ–ª—ñ—ó":
                registrationSessions.remove(telegramId);
                handleRegistration(telegramId, "", chatId);
                break;

            case "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫":
                if (existingUser.isPresent()) {
                    sendMessageKeyboard(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:", BackKeyboard.getKeyboard());
                    awaitingFeedback.put(telegramId, true);
                } else {
                    sendMessage(chatId, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é!");
                }
                break;

            default:
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ üëá", MenuKeyboard.getKeyboard());
                break;
        }
    }



    // –õ–æ–≥—ñ–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó

    private static final Map<String, Role> ROLE_MAP = Map.of(
            "–ú–µ—Ö–∞–Ω—ñ–∫", Role.MECHANIC,
            "–ï–ª–µ–∫—Ç—Ä–∏–∫", Role.ELECTRICIAN,
            "–ú–µ–Ω–µ–¥–∂–µ—Ä", Role.MANAGER
    );

    private void handleRegistration(Long telegramId, String text, Long chatId) {
        RegistrationSession session = registrationSessions.computeIfAbsent(telegramId, k -> new RegistrationSession());


        if ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(text)) {
            if (session.getRole() != null && session.getBranch() == null) {
                session.setRole(null);
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", RoleKeyboard.getKeyboard());
                return;
            } else {
                registrationSessions.remove(telegramId);
                sendMessageKeyboard(chatId, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", MenuKeyboard.getKeyboard());
                return;
            }
        }


        if (session.getRole() == null) {
            Role selectedRole = ROLE_MAP.get(text);
            if (selectedRole != null) {
                session.setRole(selectedRole);
                sendMessageKeyboard(chatId, "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é:", BranchKeyboard.getKeyboard());
            } else {
                sendMessageKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", RoleKeyboard.getKeyboard());
            }
            return;
        }


        if (session.getBranch() == null) {
            session.setBranch(text);

            User user = userRepository.findById(telegramId).orElse(new User());
            user.setTelegramId(telegramId);
            user.setRole(session.getRole());
            user.setBranch(session.getBranch());
            userRepository.save(user);

            registrationSessions.remove(telegramId);
            sendMessageKeyboard(chatId, "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏.", MenuKeyboard.getKeyboard());
        }
    }




    // –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–≥—É–∫—É

    private void handleFeedback(String message, Role role, String branch, Long telegramId, Long chatId) {
        try {
            feedbackService.processAndSaveFeedback(message, role, branch);
            sendMessageKeyboard(chatId,
                    "–í–∞—à –≤—ñ–¥–≥—É–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É —É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ —Å–µ—Ä–≤—ñ—Å—É!",
                    BackToMenuKeyboard.getKeyboard());
        } catch (Exception e) {
            System.err.println(e.getMessage());
            sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    }





    private void sendMessage(Long chatId, String text) {
        try {
            execute(new SendMessage(chatId.toString(), text));
        } catch (TelegramApiException e) {
            System.err.println(e.getMessage());
        }
    }

    private void sendMessageKeyboard(Long chatId, String text, ReplyKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(keyboard);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println(e.getMessage());
        }
    }




    @Override
    public String getBotUsername() { return botUsername; }

    @Override
    public String getBotToken() { return botToken; }
}